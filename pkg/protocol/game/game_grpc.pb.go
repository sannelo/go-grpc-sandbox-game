// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/game/game.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorldService_JoinGame_FullMethodName       = "/game.WorldService/JoinGame"
	WorldService_GameStream_FullMethodName     = "/game.WorldService/GameStream"
	WorldService_GetChunks_FullMethodName      = "/game.WorldService/GetChunks"
	WorldService_GenerateChunks_FullMethodName = "/game.WorldService/GenerateChunks"
)

// WorldServiceClient is the client API for WorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис игрового мира
type WorldServiceClient interface {
	// Вход в игру и создание сессии
	JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Двунаправленный поток для обмена игровыми событиями
	GameStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error)
	// Запрос чанков мира
	GetChunks(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Chunk], error)
	// Запрос генерации новых чанков
	GenerateChunks(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type worldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldServiceClient(cc grpc.ClientConnInterface) WorldServiceClient {
	return &worldServiceClient{cc}
}

func (c *worldServiceClient) JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, WorldService_JoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) GameStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WorldService_ServiceDesc.Streams[0], WorldService_GameStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorldService_GameStreamClient = grpc.BidiStreamingClient[ClientMessage, ServerMessage]

func (c *worldServiceClient) GetChunks(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Chunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WorldService_ServiceDesc.Streams[1], WorldService_GetChunks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChunkRequest, Chunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorldService_GetChunksClient = grpc.ServerStreamingClient[Chunk]

func (c *worldServiceClient) GenerateChunks(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, WorldService_GenerateChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldServiceServer is the server API for WorldService service.
// All implementations must embed UnimplementedWorldServiceServer
// for forward compatibility.
//
// Сервис игрового мира
type WorldServiceServer interface {
	// Вход в игру и создание сессии
	JoinGame(context.Context, *JoinRequest) (*JoinResponse, error)
	// Двунаправленный поток для обмена игровыми событиями
	GameStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error
	// Запрос чанков мира
	GetChunks(*ChunkRequest, grpc.ServerStreamingServer[Chunk]) error
	// Запрос генерации новых чанков
	GenerateChunks(context.Context, *GenerateRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedWorldServiceServer()
}

// UnimplementedWorldServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorldServiceServer struct{}

func (UnimplementedWorldServiceServer) JoinGame(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedWorldServiceServer) GameStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method GameStream not implemented")
}
func (UnimplementedWorldServiceServer) GetChunks(*ChunkRequest, grpc.ServerStreamingServer[Chunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetChunks not implemented")
}
func (UnimplementedWorldServiceServer) GenerateChunks(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateChunks not implemented")
}
func (UnimplementedWorldServiceServer) mustEmbedUnimplementedWorldServiceServer() {}
func (UnimplementedWorldServiceServer) testEmbeddedByValue()                      {}

// UnsafeWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldServiceServer will
// result in compilation errors.
type UnsafeWorldServiceServer interface {
	mustEmbedUnimplementedWorldServiceServer()
}

func RegisterWorldServiceServer(s grpc.ServiceRegistrar, srv WorldServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorldServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorldService_ServiceDesc, srv)
}

func _WorldService_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldService_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).JoinGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_GameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorldServiceServer).GameStream(&grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorldService_GameStreamServer = grpc.BidiStreamingServer[ClientMessage, ServerMessage]

func _WorldService_GetChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldServiceServer).GetChunks(m, &grpc.GenericServerStream[ChunkRequest, Chunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorldService_GetChunksServer = grpc.ServerStreamingServer[Chunk]

func _WorldService_GenerateChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).GenerateChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldService_GenerateChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).GenerateChunks(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldService_ServiceDesc is the grpc.ServiceDesc for WorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.WorldService",
	HandlerType: (*WorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _WorldService_JoinGame_Handler,
		},
		{
			MethodName: "GenerateChunks",
			Handler:    _WorldService_GenerateChunks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameStream",
			Handler:       _WorldService_GameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetChunks",
			Handler:       _WorldService_GetChunks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/game/game.proto",
}
